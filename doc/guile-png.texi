\input texinfo
@c -*-texinfo-*-
@c %**start of header
@setfilename guile-png.info
@documentencoding UTF-8
@settitle Guile-PNG Reference Manual
@c %**end of header
@include version.texi

@copying
This manual documents Guile-PNG version @value{VERSION}.

Copyright (C) 2022-2023 Artyom V. Poptsov

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled ``GNU Free
Documentation License.''
@end copying

@dircategory The Algorithmic Language Scheme
@direntry
* Guile-PNG: (guile-png).  Guile Portable Network Graphics (PNG) library.
@end direntry

@setchapternewpage odd

@titlepage
@sp 10

@title Guile-PNG Reference Manual
@subtitle For Guile-PNG @value{VERSION}

@author Artyom V. Poptsov

@page
@vskip 0pt plus 1filll
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@finalout
@headings double

@ifnottex
@node Top, Introduction, (dir), (dir)
@top The Guile-PNG Reference Manual

@insertcopying
@sp 1
@end ifnottex

@menu
* Introduction::
* Installation::
* API Reference::

Appendices

* GNU Free Documentation License::  The license of this manual.

@end menu

@contents

@node Introduction
@chapter Introduction

Guile-PNG is a @url{https://www.gnu.org/software/guile/, GNU Guile} library
that provides API for Portable Network Graphics
@url{https://tools.ietf.org/html/rfc2083, RFC 2083} format (also known as
``PNG'') parsing.

@node Installation
@chapter Installation

Guile-PNG sources are available form GitHub at
@url{https://github.com/artyom-poptsov/guile-png}.  This section
describes Guile-PNG requirements and installation process.

Guile-PNG depends on the following packages:
@itemize
@item @url{https://www.gnu.org/software/guile/, GNU Guile}, 2.2 or later
@item @url{https://github.com/artyom-poptsov/guile-smc, Guile-SMC}, 0.6.0
@end itemize

@section GNU Guix

@subsection Development version
@example
$ guix build -f ./guix.scm
$ guix package -f ./guix.scm
@end example

@section Manual Installation

To build the latest version of Guile-PNG from the sources, you need to
download the sources from GitHub or clone them using Git@footnote{A good
introduction to Git is free Pro Git book, which is available online at
@url{https://git-scm.com/book/en/v2}}.

Cloning can be done as follows:

@example
$ git clone git@@github.com:artyom-poptsov/guile-png.git
@end example

Next, you should configure the sources:

@example
$ cd guile-png/
$ autoreconf -vif
$ ./configure
@end example

And finally build and install the library:

@example
$ make
$ make install
@end example

For a basic explanation of the installation of the package, see the
@file{INSTALL} file.

Please @strong{note} that you will need
@url{https://www.gnu.org/software/automake/, Automake} version 1.12 or
later to run self-tests with @command{make check} (but the library
itself can be built with older Automake version such as 1.11).

@strong{important} You probably want to call @command{configure} with
the @option{--with-guilesitedir} option so that this package is
installed in Guile's default path.  But, if you don't know where your
Guile site directory is, run @command{configure} without the option,
and it will give you a suggestion.

@node API Reference
@chapter API Reference

This chapter describes the Guile-PNG API.

@section PNG

@code{(png)} module contains the basic PNG procedures to read/write PNG
images.

@deffn {Scheme Procedure} png->scm [port=(current-input-port) @
                                   [#:debug-mode?=#f] @
                                   [#:decompress?=#t] @
                                   [#:remove-filter?=#t]

Read PNG data fro m the specified @var{port}, return a new @code{<png-image>}
instance.

@end deffn

@deffn {Scheme Procedure} scm->png image @
                                   [port=(current-output-port)]

Convert an @var{image} to a PNG binary format, print the output to a
@var{port}.

Return value is undefined.

@end deffn

@section PNG Image

@subsection <png-compressed-image>

@deftp {Class} <png-compressed-image> [#:chunks='()]

This class represents a raw PNG image that consists of PNG chunks.

Constructor parameters:

@table @asis
@item #:chunks (chunk-list <list>)
The raw list of PNG chunks (instances of @code{<png-chunk>} class.)
@end table

@end deftp

@deffn {Scheme Procedure} png-compressed-image? x
Check if @var{X} is a @code{<png-compressed-image>} instance.
@end deffn

@deffn {Method} png-image-clone (image <png-compressed-image>)
Copy a PNG @var{IMAGE}, return a new copy.
@end deffn

@deffn {Method} png-image-chunks-query (chunks <list>) (chunk-type <symbol>))
Perform a query on a @var{chunks} list to get all the PNG chunks that have the
specified @var{chunk-type}.

Return a list of PNG chunks.
@end deffn

@deffn {Method} png-image-chunks-query (image <png-compressed-image>) (predicate <procedure>)
Perform a query on an @var{image} to get all the PNG chunks that satisfy a
@var{PREDICATE}.  The predicate is called on each chunk like follows:
@example lisp
(predicate chunk)
@end example

Return a list of PNG chunks.
@end deffn

@deffn {Method} png-image-chunks-query image <png-compressed-image>) (chunk-type <symbol>)
Perform a query on an @var{image} to get all the PNG chunks that have the
specified @var{chunk-type}.

Return a list of PNG chunks.
@end deffn

@deffn {Method} png-image-chunks-query image <png-compressed-image>) (chunk-type <vector>)
Perform a query on an @var{image} to get all the PNG chunks that have the
specified @var{chunk-type} encoded as a byte vector.

Return a list of PNG chunks.
@end deffn

@deffn  {Method} png-image-data (image <png-compressed-image>) (uncompress? <boolean>)
@deffnx {Method} png-image-data (image <png-compressed-image>)
Get the PNG @var{image} data as a single byte vector.  When @var{uncompress?}
option is set to @code{#t}, the procedure returns data in uncompressed form
(this is the default behavior when the option is not set.)

Return the image data as a byte vector.
@end deffn

@deffn {Method} png-image->png (image <png-compressed-image>) (port <output-port>)
Convert an @var{image} to a binary form, print the output data to a
@var{port}.

Return value is undefined.
@end deffn

@deffn  {Method} png-image-pretty-print-data (image <png-compressed-image>) @
                                             (port <port>)
@deffnx {Method} png-image-pretty-print-data (image <png-compressed-image>)
Pretty print the @var{image} data to a @var{port}.  When @var{port} is not
specified, the current error port is used.

Return value is undefined.
@end deffn

@deffn  {Method} png-compressed-image-decompress (image <png-compressed-image>) @
                                                 (remove-filter? <boolean>)
@deffnx {Method} png-compressed-image-decompress (image <png-compressed-image>)
Decompress an @var{image}, return a new @code{<png-image>} instance.

When @var{remove-filter?} is set to @code{#f}, the decoder will not remove PNG
filters from the image; this is useful for debugging purposes
(@var{remove-filter?} is set to @code{#t} by default.)
@end deffn

@subsection <png-image>

@deftp {Class} <png-image> @
               [#:chunks='()] @
               [#:data=(make <bytevector> 0)] @
               [#:data-chunk-size=256]

This class represents a decompressed PNG image.

Constructor parameters:

@table @asis
@item #:data (data <bytevector>)
The image data as a continuous @code{<bytevector>}.
@item #:data-chunk-size (size <number>)
The data chunk size that will be used for image encoder.
@end table

@end deftp

@deffn {Method} png-image-pixel-size (image <png-image>)
Get the @var{image} pixel size according its color type.
@end deffn

@deffn {Method} png-image-pixels (image <png-image>)
Get the total number of pixels for an @var{image}.
@end deffn

@deffn  {Method} png-image-pretty-print-data (image <png-image>) @
                                             (port <port>)
@deffnx {Method} png-image-pretty-print-data (image <png-image>)
Pretty print the @var{image} data to a @var{port}.  When @var{port} is not
specified, the current error port is used.

Return value is undefined.
@end deffn

@deffn {Method} png-image->png (image <png-image>) (port <output-port>)
Convert an @var{image} to the PNG binary format, print the data to a
@var{port}.
@end deffn

@deffn {Method} png-image-clone (image <png-image>)
Make an exact copy of an @var{image}, return the copy.
@end deffn

@section Graphics

@code{(png graphcis ...)} contains classes that describing graphical objects
that can be drawn on a @code{<png-image>} instance.

@code{(png graphics)} modulep re-exports all the graphical objects.

@subsection Pixel-Level Graphics

@code{(png graphics pixel)} module provides low-level API for working with PNG
pixel data.

@deffn {Method} png-image-pixel-ref (image <png-image>) @
                                    (x <number>)

Get the value of a pixel referenced by @var{x} from an @var{image}.  The pixel
is returned as a byte vector.

@end deffn

@deffn {Method} png-image-pixel-ref (image <png-image>) @
                                    (x <number>) @
                                    (y <number>)

Get the value of a pixel referenced by @var{x} and @var{y} from an
@var{image}. The pixel is returned as a byte vector.

@end deffn

@deffn {Method} png-image-pixel-set! (image <png-image>) @
                                     (x     <number>) @
                                     (pixel <bytevector>)

Set the @var{pixel} value for a pixel referenced by @var{x} from an
@var{image}.  The return value is undefined.

@end deffn

@deffn {Method} png-image-pixel-set! (image <png-image>) @
                                     (x     <number>) @
                                     (y     <number>) @
                                     (pixel <bytevector>)

Set the @var{pixel} value for a pixel referenced by @var{x} and @var{y} from
an @var{image}. The return value is undefined.

@end deffn

@subsection Graphic Objects

@code{(png graphics graphic)} contains @code{<graphic>} class which is the
foundation for every graphical object that can be drawn on a
@code{<png-image>} instance.

@deftp {Class} <graphic> [#:color=#u8(0 0 0 0)]

This class represents a generic graphical object.

Constructor parameters:

@table @asis
@item #:color (color <bytevector>)
Graphic object color. The number of bytes in the vector must be the same as
the number of bytes per pixel in an image.
@end table

@end deftp

@deffn {Method} draw! (image <png-image>) (graphic <graphic>)
This method throws an error because a generic @var{graphic} instance cannot be
drawn.
@end deffn

@subsection Point

@code{(png graphics point)} describes the simplest object that can be drawn on
a @code{<png-image>} instance -- a single point.

@deftp {Class} <point> [#:color=#u8(0 0 0 0)] @
                       [#:x=0] @
                       [#:y=0]

Single graphical point.

@end deftp

@deffn {Method} draw! (image <png-image>) (point <point>)
Draw a @var{point} on an @var{image}.
@end deffn

@deffn {Method} point-x (point <point>)
The the X coordinate of a @var{point}.
@end deffn

@deffn {Method} point-y (point <point>)
The the Y coordinate of a @var{point}.
@end deffn

@subsection Line

@code{(png graphics line)} describes a line.

@deftp {Class} <line> [#:color=#u8(0 0 0 0)] @
                      [#:p1=(lambda () (make <point>))] @
                      [#:p2=(lambda () (make <point>))]

Graphical line that can be drawn on a @code{<png-image>} instance.

Constructor parameters:
@table @asis
@item #:color (color <bytevector>)
Graphic object color. The number of bytes in the vector must be the same as
the number of bytes per pixel in an image.
@item #:p1 (p1 <point>)
The first point of the line.  If not set, a point on coordinates 0, 0 is used.
@item #:p2 (p2 <point>)
The second point of the line.  If not set, a point on coordinates 0, 0 is
used.
@end table

@end deftp

@deffn {Method} draw! (image <png-image>) (line <line>)
Draw a @var{line} on an @var{image}.
@end deffn

@deffn {Method} line-p1 (line <line>)
Get the starting point of a @var{line}.
@end deffn

@deffn {Method} line-p2 (line <line>)
Get the ending point of a @var{line}.
@end deffn

@subsection Multiline

@code{(png graphics multiline)} contains a @code{<multiline>} class.

@deftp {Class} <multiline> [#:color=#u8(0 0 0 0)] @
                           [#:points='()]

This class describes a line with multiple break points.

Constructor parameters:
@table @asis
@item #:color (color <bytevector>)
Graphic object color. The number of bytes in the vector must be the same as
the number of bytes per pixel in an image.
@item #:points (points <list>)
The list of @code{<point>} instances.
@end table

@end deftp

@deffn {Method} draw! (image <png-image>) (multiline <multiline>)

Draw a @var{multiline} on an @var{image}.

@end deffn

@deffn {Method} multiline-points (multiline <multiline>)
Get the points of a @var{multiline}.
@end deffn

@subsection Polygon

@code{(png graphics polygon)} contains a @code{<polygon>} class.

@deftp {Class} <polygon> [#:color=#u8(0 0 0 0)] @
                         [#:points='()]

This class describes a polygon.

Constructor parameters:
@table @asis
@item #:color (color <bytevector>)
Graphic object color. The number of bytes in the vector must be the same as
the number of bytes per pixel in an image.
@item #:points (points <list>)
The list of @code{<point>} instances that describe the points of the polygon.
@end table

@end deftp

@deffn {Method} draw! (image <png-image>) (polygon <polygon>)

Draw a @var{polygon} on an @var{image}.

@end deffn

@deffn {Method} polygon-points (multiline <multiline>)
Get the points of a @var{polygon}.
@end deffn

@subsection Rectangle

@code{(png graphics rectangle)} contains a @code{<rectangle>} class.

@deftp {Class} <rectangle> [#:color=#u8(0 0 0 0)] @
                           [#:position=(lambda () (make <point>))] @
                           [#:width=0] @
                           [#:height=0]

This class describes a rectangle.

Constructor parameters:
@table @asis
@item #:color (color <bytevector>)
Graphic object color. The number of bytes in the vector must be the same as
the number of bytes per pixel in an image.
@item #:position (point <point>)
The position of the upper left angle of the rectangle.
@item #:width (width <number>)
The width of the rectangle.
@item #:height (height <number>)
The height of the rectangle.
@end table

@end deftp

@deffn {Method} draw! (image <png-image>) (rectangle <rectangle>)

Draw a @var{rectangle} on an @var{image}.

@end deffn

@deffn {Method} rectangle-position (rectangle <rectangle>)
Get the position of a @var{rectangle}.
@end deffn

@deffn {Method} rectangle-width (rectangle <rectangle>)
Get the width of a @var{rectangle}.
@end deffn

@deffn {Method} rectangle-height (rectangle <rectangle>)
Get the height of a @var{rectangle}.
@end deffn

@subsection Filled Rectangle

@code{(png graphics filled-rectangle)} contains a @code{<filled-rectangle>}
class.

@deftp {Class} <filled-rectangle> [#:color=#u8(0 0 0 0)] @
                                  [#:position=(lambda () (make <point>))] @
                                  [#:width=0] @
                                  [#:height=0]

This class describes a filled rectangle.

Constructor parameters:
@table @asis
@item #:color (color <bytevector>)
Graphic object color. The number of bytes in the vector must be the same as
the number of bytes per pixel in an image.
@item #:position (point <point>)
The position of the upper left angle of the rectangle.
@item #:width (width <number>)
The width of the rectangle.
@item #:height (height <number>)
The height of the rectangle.
@end table

@end deftp

@deffn {Method} draw! (image <png-image>) (rectangle <rectangle>)

Draw a @var{rectangle} on an @var{image}.

@end deffn

@deffn {Method} filled-rectangle-position (rectangle <rectangle>)
Get the position of a @var{rectangle}.
@end deffn

@deffn {Method} filled-rectangle-width (rectangle <rectangle>)
Get the width of a @var{rectangle}.
@end deffn

@deffn {Method} filled-rectangle-height (rectangle <rectangle>)
Get the height of a @var{rectangle}.
@end deffn

@subsection Ellipse

@code{(png graphics ellipse)} contains an @code{<ellipse>} class.

@deftp {Class} <ellipse> [#:color=#u8(0 0 0 0)] @
                         [#:center=(lambda () (make <point>))] @
                         [#:width=0] @
                         [#:height=0]

This class describes an ellipse.

Constructor parameters:
@table @asis
@item #:color (color <bytevector>)
Graphic object color. The number of bytes in the vector must be the same as
the number of bytes per pixel in an image.
@item #:center (point <point>)
The position of the ellipse center.
@item #:width (width <number>)
The width of the ellipse.
@item #:height (height <number>)
The height of the ellipse.
@end table

@end deftp

@deffn {Method} draw! (image <png-image>) (ellipse <ellipse>)

Draw an @var{ellipse} on an @var{image}.

@end deffn

@deffn {Method} ellipse-center (ellipse <ellipse>)
Get the center point of an @var{ellipse}.
@end deffn

@deffn {Method} ellipse-width (ellipse <ellipse>)
Get the width of an @var{ellipse}.
@end deffn

@deffn {Method} ellipse-height (ellipse <ellipse>)
Get the height of an @var{ellipse}.
@end deffn

@subsection Circle

@code{(png graphics circle)} contains a @code{<circle>} class.

@deftp {Class} <circle> [#:color=#u8(0 0 0 0)] @
                        [#:center=(lambda () (make <point>))] @
                        [#:radius=0] @
                        [#:diameter=0]

This class describes a circle.

Constructor parameters:
@table @asis
@item #:color (color <bytevector>)
Graphic object color. The number of bytes in the vector must be the same as
the number of bytes per pixel in an image.
@item #:center (point <point>)
The position of the ellipse center.
@item #:radius (value <number>)
The radius of the circle.
@item #:diameter (value <number>)
The diameter of the circle.  Note that only one of the dimensions must be
specified; when both diameter and radius are set, an error will be thrown.
@end table

@end deftp

@deffn {Method} draw! (image <png-image>) (circle <circle>)

Draw an @var{circle} on an @var{image}.

@end deffn

@deffn {Method} circle-center (circle <circle>)
Get the center of a @var{circle}.
@end deffn

@deffn {Method} circle-radius (circle <circle>)
Get the radius of a @var{circle}.
@end deffn

@deffn {Method} circle-diameter (circle <circle>)
Get the diameter of a @var{circle}.
@end deffn

@section PNG Image Processing

@code{(png image-processing)} provides high-level API for processing PNG
images.

@deffn {Method} png-image-invert-colors (image <png-image>)

Invert colors of an @var{image}, return a new image.

@end deffn

@deffn {Method} png-image-solarize (image     <png-image>) @
                                   (threshold <number>)

Apply solarization effect to an @var{image} with the given @var{threshold}.
Return a new image.

@end deffn

@deffn {Scheme Procedure} png-image-grayscale image @
                                              [#:method='weighted]

Copy an @var{image} and apply 'grayscale' effect on the copy.  Return the new
image.

A @var{method} is a symbol that is expected to be either @code{weighted} (default)
or @code{average}.

@end deffn

@section PNG Chunks

A PNG file consists of a PNG signature followed by a series of ``chunks''.
@code{(png core chunk)} describes a generic PNG chunk.

@deftp {Class} <png-chunk> [#:length=0] @
                           [#:type=#f] @
                           [#:data=#vu8()] @
                           [#:crc=0]

This class describes a generic PNG Chunk.

Constructor parameters:
@table @asis
@item #:length (length <number>)
A 4-byte unsigned integer giving the number of bytes in the chunk's data
field. The length counts only the data field, not itself, the chunk type code,
or the CRC.  Zero is a valid length.  The value must not exceed (2^31)-1
bytes.
@item #:type (type <symbol>)
A chunk type code.  For convenience in description and in examining PNG files,
type codes are restricted to consist of uppercase and lowercase ASCII letters
(A-Z and a-z, or 65-90 and 97-122 decimal.)
@item #:data (data <bytevector>)
The chunk data.  This part can be of zero length.
@item #:crc (value <number>)
4-byte CRC Cyclic Redundancy Check) calculated on the preceding bytes in the
chunk, including the chunk type code and chunk data fields, but not including
the length field.  The CRC is always present, even for chunks containing no
data.
@end table

@end deftp

@deffn {Scheme Procedure} png-chunk? x
Check if @var{x} is a @code{<png-chunk>} instance.
@end deffn

@deffn {Method} png-chunk-clone (chunk <png-chunk>)
Make a copy of a @var{chunk}.
@end deffn

@deffn {Method} png-chunk-ancillary? (bv <bytevector>)
Check if a bytevector @var{bv} describes a chunk type that is ancillary.
@end deffn

@deffn {Method} png-chunk-ancillary? (chunk <png-chunk>)
Check if a @var{chunk} is ancillary.
@end deffn

@deffn {Method} png-chunk-safe-to-copy? (bv <bytevector>)
Check if a bytevector @var{bv} describes a chunk type that is safe to copy.
@end deffn

@deffn {Method} png-chunk-safe-to-copy? (chunk <png-chunk>)
Check if a @var{chunk} is safe to copy.
@end deffn

@deffn {Method} png-chunk-crc-calculate (chunk <png-chunk>)
Calculate a Cyclic Redundancy Code (CRC) for a @var{chunk}.
@end deffn

@deffn {Method} png-chunk-crc-update! (chunk <png-chunk>)
Re-calculate and update the @var{chunk} Cyclic Redundancy Code (CRC.)
@end deffn

@deffn {Method} png-chunk-valid? (chunk <png-chunk>)
Check if a @var{chunk} has a valid Cyclic Redundancy Code (CRC.)
@end deffn

@deffn {Method} png-chunk->png (chunk <png-chunk>) (port <output-port>)
Convert a @var{chunk} to a binary form and write it to a @var{port}.
@end deffn

@subsection IHDR
PNG image header (IHDR) chunk.  The IHDR chunk must appear first.

Note that the setter methods below do not update the CRC of a PNG image.

@deffn {Method} png-chunk:IHDR-width (chunk <png-chunk:IHDR>)
Get the image width from an IHDR @var{chunk}.
@end deffn

@deffn {Method} png-chunk:IHDR-width-set! (chunk <png-chunk:IHDR>)
Set the image width for an IHDR @var{chunk}.
@end deffn

@deffn {Method} png-chunk:IHDR-height (chunk <png-chunk:IHDR>)
Get the image height from an IHDR @var{chunk}.
@end deffn

@deffn {Method} png-chunk:IHDR-height-set! (chunk <png-chunk:IHDR>)
Set the image height for an IHDR @var{chunk}.
@end deffn

@deffn {Method} png-chunk:IHDR-bit-depth (chunk <png-chunk:IHDR>)
Get the image bit depth from an IHDR @var{chunk}.
@end deffn

@deffn {Method} png-chunk:IHDR-bit-depth-set! (chunk <png-chunk:IHDR>)
Set the image bit depth for an IHDR @var{chunk}.
@end deffn

@deffn {Method} png-chunk:IHDR-color-type (chunk <png-chunk:IHDR>)
Get the image color type from an IHDR @var{chunk}.
@end deffn

@deffn {Method} png-chunk:IHDR-color-type-set! (chunk <png-chunk:IHDR>)
Set the image color type for an IHDR @var{chunk}.
@end deffn

@deffn {Method} png-chunk:IHDR-compression-method (chunk <png-chunk:IHDR>)
Get the image compression method from an IHDR @var{chunk}.
@end deffn

@deffn {Method} png-chunk:IHDR-compression-method-set! (chunk <png-chunk:IHDR>)
Set the image compression method for an IHDR @var{chunk}.
@end deffn

@deffn {Method} png-chunk:IHDR-filter-method (chunk <png-chunk:IHDR>)
Get the image filtering method from an IHDR @var{chunk}.
@end deffn

@deffn {Method} png-chunk:IHDR-filter-method-set! (chunk <png-chunk:IHDR>)
Set the image filtering method for an IHDR @var{chunk}.
@end deffn

@deffn {Method} png-chunk:IHDR-interlace-method (chunk <png-chunk:IHDR>)
Get the image interlace method from an IHDR @var{chunk}.
@end deffn

@deffn {Method} png-chunk:IHDR-interlace-method-set! (chunk <png-chunk:IHDR>)
Set the image interlace method for an IHDR @var{chunk}.
@end deffn

@deffn  {Method} data:width (data <bytevector>)
@deffnx {Method} data:height (data <bytevector>)
@deffnx {Method} data:bit-depth (data <bytevector>)
@deffnx {Method} data:color-type (data <bytevector>)
@deffnx {Method} data:compression-method (data <bytevector>)
@deffnx {Method} data:filter-method (data <bytevector>)
@deffnx {Method} data:interlace-method (data <bytevector>)
Those methods are the accessors for the specific parts of IHDR chunk data.
@end deffn
            
@deffn {Method} png-chunk-decode-IHDR (chunk <png-chunk>)
Decode an IHDR chunk from a plain PNG @var{chunk}.
@end deffn

@deffn {Method} png-chunk-encode (chunk <png-chunk:IHDR>)
Encode an IHDR @var{chunk} into a plain @code{<png-chunk>}.
@end deffn

@subsection IEND
PNG image final chunk (IEND).  The IEND chunk must appear last.

This chunk is available from @code{(png core chunk IEND)} module.

@deftp {Class} <png-chunk:IEND>
IEND chunk implementation.
@end deftp

@deffn {Method} png-chunk-decode-IEND (chunk <png-chunk>)
Decode an IEND chunk from a PNG @var{chunk}.
@end deffn

@deffn {Method} png-chunk-encode (chunk <png-chunk:IEND>)
Encode an IEND @var{chunk} into a plain @code{<png-chunk>}.
@end deffn

@subsection PLTE
PNG image palette (PLTE) chunk.  The chunk contains from 1 to 256 palette
entries, each a three-byte series of the form:

@example
   Red:   1 byte (0 = black, 255 = red)
   Green: 1 byte (0 = black, 255 = green)
   Blue:  1 byte (0 = black, 255 = blue)
@end example

@deftp {Class} <png-chunk:PLTE> [#:palette-entries=(lambda () (make-vector 0))]
PLTE chunk implementation.

Constructor parameters:
@table @asis
@item #:palette-entries (entries <vector>)
This field contains a palette entries, each a three-byte vector of the form:
@example
#vu8(red green blue)
@end example
@end table
@end deftp

@deffn {Method} png-chunk:PLTE-palette-entries (chunk <png-chunk:PLTE>)
Get all palette entries from a @var{chunk}.
@end deffn

@deffn {Method} png-chunk:PLTE-palette-entry (chunk <png-chunk:PLTE>) @
                                             (index <number>)
Get a palette entry from a @var{chunk} by its @var{index}.
@end deffn

@deffn {Method} png-chunk:PLTE-palette-entries-count (chunk <png-chunk:PLTE>)
Get the count of palette entries from a @var{chunk}.
@end deffn

@deffn  {Method} palette:red (plte <bytevector>)
@deffnx {Method} palette:green (plte <bytevector>)
@deffnx {Method} palette:blue (plte <bytevector>)
Get the color value from a palette entry.
@end deffn

@deffn {Method} vector->PLTE-palette-entries (vec <bytevector>)
Convert a bytevector @var{vec} of PLTE data to a palette entries for a PLTE
chunk.

Return a vector of palette entries, each of which is represented as a
three-byte bytevector of the following format:

@example
  Red:   1 byte (0 = black, 255 = red)
  Green: 1 byte (0 = black, 255 = green)
  Blue:  1 byte (0 = black, 255 = blue)
@end example
@end deffn

@deffn {Method} PLTE-palette-entries->vector (vec <vector>)
Convert a vector @var{vec} to a PLTE chunk data.
@end deffn

@deffn {Method} png-chunk-decode-PLTE (chunk <png-chunk>)
Decode a PLTE chunk from a plain PNG @var{chunk}.
@end deffn

@deffn {Method} png-chunk-encode (chunk <png-chunk:PLTE>)
Convert a PLTE @var{chunk} to a plain @code{<png-chunk>} instance.
@end deffn

@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl.texi

@bye
